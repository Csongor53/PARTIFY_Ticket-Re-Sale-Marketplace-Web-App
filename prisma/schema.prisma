// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }
//
// datasource db {
//   provider = "sqlserver"
//   url      = env("DATABASE_URL")
// }
//
// model Account {
//   id                String  @id @default(cuid())
//   userId            String  @map("user_id")
//   type              String
//   provider          String
//   providerAccountId String  @map("provider_account_id")
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }
//
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@map("sessions")
// }
//
// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//
//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }
//
// model User {
//   id            String    @id @default(cuid())
//   email         String?   @unique
//   emailVerified DateTime? @map("email_verified")
//   accComplete   DateTime? @map("account_complete")
//   firstName     String?   @map("first_name")
//   surname       String?
//   // age           Int?
//   gender        String?
//   iban          String?
//   phone         String?
//
//   accounts Account[]
//   sessions Session[]
//   tickets  Ticket[]
//
//   @@map("users")
// }
//
// model Role {
//   id     Int    @id @default(autoincrement())
//   name   String @unique
//   userId String @map("user_id")
//
//   @@map("roles")
// }
//
// model Ticket {
//   id          Int      @id @default(autoincrement())
//   userEmail   String   @map("user_email")
//   title       String
//   date        DateTime
//   venue       String
//   price       Int
//   description String
//   firstName   String?  @map("first_name")
//   surname     String?
//   fileUrl     String   @map("file_url")
//
//   user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
//
//   @@map("tickets")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  accComplete   DateTime? @map("account_complete")
  firstName     String?   @map("first_name")
  surname       String?
  // age           Int?
  gender        String?
  iban          String?
  phone         String?

  // One to many
  accounts   Account[]
  sessions   Session[]
  tickets    Ticket[]
  PaidTicket PaidTicket[]

  // Many to Many
  roles UserRole[]

  @@map("users")
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String @map("user_id")
  roleId Int    @map("role_id")
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Ticket {
  id          Int      @id @default(autoincrement())
  userEmail   String   @map("user_email")
  title       String
  eventDate   DateTime
  uploadDate  DateTime
  venue       String
  price       Int
  description String
  firstName   String?  @map("first_name")
  surname     String?
  fileUrl     String   @map("file_url")
  state       String
  visible     Boolean

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("tickets")
}

model PaidTicket {
  id          Int      @id @default(autoincrement())
  ticketId    Int      @map("ticket_id")
  userEmail   String   @map("user_email")
  title       String
  eventDate   DateTime
  uploadDate  DateTime
  venue       String
  price       Int
  description String
  firstName   String?  @map("first_name")
  surname     String?
  fileUrl     String   @map("file_url")
  paidDate    DateTime @map("paid_date")

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("paid_tickets")
}
